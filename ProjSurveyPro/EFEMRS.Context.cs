//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjSurveyPro
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class dbEMRSEntities : DbContext
    {
        public dbEMRSEntities()
            : base("name=dbEMRSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CategoryMst> CategoryMsts { get; set; }
        public DbSet<CityMst> CityMsts { get; set; }
        public DbSet<ClientMst> ClientMsts { get; set; }
        public DbSet<EmployeeMst> EmployeeMsts { get; set; }
        public DbSet<FeedbackMst> FeedbackMsts { get; set; }
        public DbSet<HelpingQue> HelpingQues { get; set; }
        public DbSet<ProductMst> ProductMsts { get; set; }
        public DbSet<ReviewAn> ReviewAns { get; set; }
        public DbSet<ReviewQue> ReviewQues { get; set; }
        public DbSet<StateMst> StateMsts { get; set; }
        public DbSet<SurveyAn> SurveyAns { get; set; }
        public DbSet<SurveyMst> SurveyMsts { get; set; }
        public DbSet<SurveyPayment> SurveyPayments { get; set; }
        public DbSet<SurveyQue> SurveyQues { get; set; }
        public DbSet<TransferAmount> TransferAmounts { get; set; }
        public DbSet<UserMst> UserMsts { get; set; }
        public DbSet<EwalletMst> EwalletMsts { get; set; }
        public DbSet<PackageMst> PackageMsts { get; set; }
        public DbSet<PurchasePackage> PurchasePackages { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<QueryMst> QueryMsts { get; set; }
    
        public virtual int uspSaveClientMst(Nullable<short> clientID, string compName, string compAddress, string ownerName, string companyLogo, string contactNo, string mobileNo, string gSTNo, string websiteName, string emailID, Nullable<System.DateTime> joiningDate, Nullable<bool> isActive)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var compAddressParameter = compAddress != null ?
                new ObjectParameter("CompAddress", compAddress) :
                new ObjectParameter("CompAddress", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var websiteNameParameter = websiteName != null ?
                new ObjectParameter("WebsiteName", websiteName) :
                new ObjectParameter("WebsiteName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveClientMst", clientIDParameter, compNameParameter, compAddressParameter, ownerNameParameter, companyLogoParameter, contactNoParameter, mobileNoParameter, gSTNoParameter, websiteNameParameter, emailIDParameter, joiningDateParameter, isActiveParameter);
        }
    
        public virtual int uspSaveEmployeeMst(Nullable<byte> empID, string empName, Nullable<bool> gender, string empAddress, string mobileNo, string emailID, Nullable<System.DateTime> dtBirth, Nullable<System.DateTime> joiningDate, string designation, string empImage, Nullable<bool> isActive)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var empAddressParameter = empAddress != null ?
                new ObjectParameter("EmpAddress", empAddress) :
                new ObjectParameter("EmpAddress", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var dtBirthParameter = dtBirth.HasValue ?
                new ObjectParameter("DtBirth", dtBirth) :
                new ObjectParameter("DtBirth", typeof(System.DateTime));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var empImageParameter = empImage != null ?
                new ObjectParameter("EmpImage", empImage) :
                new ObjectParameter("EmpImage", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveEmployeeMst", empIDParameter, empNameParameter, genderParameter, empAddressParameter, mobileNoParameter, emailIDParameter, dtBirthParameter, joiningDateParameter, designationParameter, empImageParameter, isActiveParameter);
        }
    
        public virtual int uspSaveUserMst(Nullable<short> userID, string userName, Nullable<bool> gender, string userAddress, Nullable<byte> cityID, Nullable<byte> stateID, string mobNo, string emailID, Nullable<System.DateTime> dtBirth, string userImage, Nullable<System.DateTime> joiningDate, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var userAddressParameter = userAddress != null ?
                new ObjectParameter("UserAddress", userAddress) :
                new ObjectParameter("UserAddress", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(byte));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(byte));
    
            var mobNoParameter = mobNo != null ?
                new ObjectParameter("MobNo", mobNo) :
                new ObjectParameter("MobNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var dtBirthParameter = dtBirth.HasValue ?
                new ObjectParameter("DtBirth", dtBirth) :
                new ObjectParameter("DtBirth", typeof(System.DateTime));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveUserMst", userIDParameter, userNameParameter, genderParameter, userAddressParameter, cityIDParameter, stateIDParameter, mobNoParameter, emailIDParameter, dtBirthParameter, userImageParameter, joiningDateParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> uspSavePackageMst(Nullable<byte> packageID, string packageTitle, string discription, Nullable<decimal> price, Nullable<byte> duration, Nullable<byte> noOfProduct, Nullable<byte> noOfSurveyQues, Nullable<byte> noOfReviewQues, Nullable<short> noOfResponse, Nullable<byte> empID)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(byte));
    
            var packageTitleParameter = packageTitle != null ?
                new ObjectParameter("PackageTitle", packageTitle) :
                new ObjectParameter("PackageTitle", typeof(string));
    
            var discriptionParameter = discription != null ?
                new ObjectParameter("Discription", discription) :
                new ObjectParameter("Discription", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(byte));
    
            var noOfProductParameter = noOfProduct.HasValue ?
                new ObjectParameter("NoOfProduct", noOfProduct) :
                new ObjectParameter("NoOfProduct", typeof(byte));
    
            var noOfSurveyQuesParameter = noOfSurveyQues.HasValue ?
                new ObjectParameter("NoOfSurveyQues", noOfSurveyQues) :
                new ObjectParameter("NoOfSurveyQues", typeof(byte));
    
            var noOfReviewQuesParameter = noOfReviewQues.HasValue ?
                new ObjectParameter("NoOfReviewQues", noOfReviewQues) :
                new ObjectParameter("NoOfReviewQues", typeof(byte));
    
            var noOfResponseParameter = noOfResponse.HasValue ?
                new ObjectParameter("NoOfResponse", noOfResponse) :
                new ObjectParameter("NoOfResponse", typeof(short));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("uspSavePackageMst", packageIDParameter, packageTitleParameter, discriptionParameter, priceParameter, durationParameter, noOfProductParameter, noOfSurveyQuesParameter, noOfReviewQuesParameter, noOfResponseParameter, empIDParameter);
        }
    
        public virtual ObjectResult<uspSaveCityMst_Result> uspSaveCityMst(Nullable<byte> stateID, Nullable<byte> cityID, string cityName)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(byte));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(byte));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSaveCityMst_Result>("uspSaveCityMst", stateIDParameter, cityIDParameter, cityNameParameter);
        }
    
        public virtual ObjectResult<CityMst> City(Nullable<byte> stateID, Nullable<byte> cityID, string cityName)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(byte));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(byte));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CityMst>("City", stateIDParameter, cityIDParameter, cityNameParameter);
        }
    
        public virtual ObjectResult<CityMst> City(Nullable<byte> stateID, Nullable<byte> cityID, string cityName, MergeOption mergeOption)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(byte));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(byte));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CityMst>("City", mergeOption, stateIDParameter, cityIDParameter, cityNameParameter);
        }
    
        public virtual int uspSaveHelpingQues(Nullable<byte> categoryID, Nullable<short> questionID, string question, string answer1, string answer2, string answer3, string answer4, string answer5, string answer6, string answer7)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(byte));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answer1Parameter = answer1 != null ?
                new ObjectParameter("Answer1", answer1) :
                new ObjectParameter("Answer1", typeof(string));
    
            var answer2Parameter = answer2 != null ?
                new ObjectParameter("Answer2", answer2) :
                new ObjectParameter("Answer2", typeof(string));
    
            var answer3Parameter = answer3 != null ?
                new ObjectParameter("Answer3", answer3) :
                new ObjectParameter("Answer3", typeof(string));
    
            var answer4Parameter = answer4 != null ?
                new ObjectParameter("Answer4", answer4) :
                new ObjectParameter("Answer4", typeof(string));
    
            var answer5Parameter = answer5 != null ?
                new ObjectParameter("Answer5", answer5) :
                new ObjectParameter("Answer5", typeof(string));
    
            var answer6Parameter = answer6 != null ?
                new ObjectParameter("Answer6", answer6) :
                new ObjectParameter("Answer6", typeof(string));
    
            var answer7Parameter = answer7 != null ?
                new ObjectParameter("Answer7", answer7) :
                new ObjectParameter("Answer7", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveHelpingQues", categoryIDParameter, questionIDParameter, questionParameter, answer1Parameter, answer2Parameter, answer3Parameter, answer4Parameter, answer5Parameter, answer6Parameter, answer7Parameter);
        }
    
        public virtual ObjectResult<uspGetCity_Result> uspGetCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCity_Result>("uspGetCity");
        }
    
        public virtual ObjectResult<uspGetHelpingQues_Result> uspGetHelpingQues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetHelpingQues_Result>("uspGetHelpingQues");
        }
    
        public virtual ObjectResult<uspGetPackage_Result> uspGetPackage(Nullable<byte> package)
        {
            var packageParameter = package.HasValue ?
                new ObjectParameter("Package", package) :
                new ObjectParameter("Package", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPackage_Result>("uspGetPackage", packageParameter);
        }
    
        public virtual ObjectResult<uspGetProduct_Result> uspGetProduct(Nullable<short> product)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProduct_Result>("uspGetProduct", productParameter);
        }
    
        public virtual ObjectResult<uspGetState_Result> uspGetState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetState_Result>("uspGetState");
        }
    
        public virtual ObjectResult<uspGetCategory_Result> uspGetCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCategory_Result>("uspGetCategory");
        }
    
        public virtual ObjectResult<StateMst> GetState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StateMst>("GetState");
        }
    
        public virtual ObjectResult<StateMst> GetState(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StateMst>("GetState", mergeOption);
        }
    
        public virtual ObjectResult<CategoryMst> GetCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoryMst>("GetCategory");
        }
    
        public virtual ObjectResult<CategoryMst> GetCategory(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoryMst>("GetCategory", mergeOption);
        }
    
        public virtual ObjectResult<HelpingQue> GetHelpingQues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HelpingQue>("GetHelpingQues");
        }
    
        public virtual ObjectResult<HelpingQue> GetHelpingQues(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HelpingQue>("GetHelpingQues", mergeOption);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int uspGetClient(Nullable<short> client)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetClient", clientParameter);
        }
    
        public virtual ObjectResult<uspGetUser_Result> uspGetUser(Nullable<short> user)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUser_Result>("uspGetUser", userParameter);
        }
    
        public virtual ObjectResult<CityMst> GetCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CityMst>("GetCity");
        }
    
        public virtual ObjectResult<CityMst> GetCity(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CityMst>("GetCity", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveApprovedClient(Nullable<short> clientID, Nullable<bool> isActive, Nullable<byte> approvedEmpID, Nullable<System.DateTime> activeLeaveDt)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var approvedEmpIDParameter = approvedEmpID.HasValue ?
                new ObjectParameter("ApprovedEmpID", approvedEmpID) :
                new ObjectParameter("ApprovedEmpID", typeof(byte));
    
            var activeLeaveDtParameter = activeLeaveDt.HasValue ?
                new ObjectParameter("ActiveLeaveDt", activeLeaveDt) :
                new ObjectParameter("ActiveLeaveDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveApprovedClient", clientIDParameter, isActiveParameter, approvedEmpIDParameter, activeLeaveDtParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveApprovedUser(Nullable<short> userID, Nullable<bool> isActive, Nullable<System.DateTime> activeLeaveDate, Nullable<byte> approvedEmpID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var activeLeaveDateParameter = activeLeaveDate.HasValue ?
                new ObjectParameter("ActiveLeaveDate", activeLeaveDate) :
                new ObjectParameter("ActiveLeaveDate", typeof(System.DateTime));
    
            var approvedEmpIDParameter = approvedEmpID.HasValue ?
                new ObjectParameter("ApprovedEmpID", approvedEmpID) :
                new ObjectParameter("ApprovedEmpID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveApprovedUser", userIDParameter, isActiveParameter, activeLeaveDateParameter, approvedEmpIDParameter);
        }
    
        public virtual ObjectResult<uspGetEmployee_Result> uspGetEmployee(Nullable<byte> emp)
        {
            var empParameter = emp.HasValue ?
                new ObjectParameter("Emp", emp) :
                new ObjectParameter("Emp", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEmployee_Result>("uspGetEmployee", empParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> uspSaveApprovedEmployee(Nullable<byte> empID, Nullable<bool> isActive, Nullable<System.DateTime> activeLeaveDt)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var activeLeaveDtParameter = activeLeaveDt.HasValue ?
                new ObjectParameter("ActiveLeaveDt", activeLeaveDt) :
                new ObjectParameter("ActiveLeaveDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("uspSaveApprovedEmployee", empIDParameter, isActiveParameter, activeLeaveDtParameter);
        }
    
        public virtual ObjectResult<ClientMst> GetClient(Nullable<short> client)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientMst>("GetClient", clientParameter);
        }
    
        public virtual ObjectResult<ClientMst> GetClient(Nullable<short> client, MergeOption mergeOption)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientMst>("GetClient", mergeOption, clientParameter);
        }
    
        public virtual ObjectResult<UserMst> GetUser(Nullable<short> user)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMst>("GetUser", userParameter);
        }
    
        public virtual ObjectResult<UserMst> GetUser(Nullable<short> user, MergeOption mergeOption)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserMst>("GetUser", mergeOption, userParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveApprovedPackage(Nullable<byte> packageID, Nullable<bool> isActive)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveApprovedPackage", packageIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<PackageMst> GetPackage(Nullable<byte> package)
        {
            var packageParameter = package.HasValue ?
                new ObjectParameter("Package", package) :
                new ObjectParameter("Package", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PackageMst>("GetPackage", packageParameter);
        }
    
        public virtual ObjectResult<PackageMst> GetPackage(Nullable<byte> package, MergeOption mergeOption)
        {
            var packageParameter = package.HasValue ?
                new ObjectParameter("Package", package) :
                new ObjectParameter("Package", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PackageMst>("GetPackage", mergeOption, packageParameter);
        }
    
        public virtual ObjectResult<uspGetPurchasePackage_Result> uspGetPurchasePackage(Nullable<short> purchasePackage)
        {
            var purchasePackageParameter = purchasePackage.HasValue ?
                new ObjectParameter("PurchasePackage", purchasePackage) :
                new ObjectParameter("PurchasePackage", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPurchasePackage_Result>("uspGetPurchasePackage", purchasePackageParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveApprovedPurchasePackage(Nullable<short> purchaseID, Nullable<System.DateTime> startingDate, Nullable<System.DateTime> endingDate, Nullable<bool> paidStatus)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(short));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("StartingDate", startingDate) :
                new ObjectParameter("StartingDate", typeof(System.DateTime));
    
            var endingDateParameter = endingDate.HasValue ?
                new ObjectParameter("EndingDate", endingDate) :
                new ObjectParameter("EndingDate", typeof(System.DateTime));
    
            var paidStatusParameter = paidStatus.HasValue ?
                new ObjectParameter("PaidStatus", paidStatus) :
                new ObjectParameter("PaidStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveApprovedPurchasePackage", purchaseIDParameter, startingDateParameter, endingDateParameter, paidStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveReviewQues(Nullable<short> surveyID, Nullable<byte> categoryID, Nullable<short> questionID, string question)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(byte));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveReviewQues", surveyIDParameter, categoryIDParameter, questionIDParameter, questionParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveSurveyQues(Nullable<short> surveyID, Nullable<byte> categoryID, Nullable<short> questionID, string question, string answer1, string answer2, string answer3, string answer4, string answer5, string answer6, string answer7)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(byte));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answer1Parameter = answer1 != null ?
                new ObjectParameter("Answer1", answer1) :
                new ObjectParameter("Answer1", typeof(string));
    
            var answer2Parameter = answer2 != null ?
                new ObjectParameter("Answer2", answer2) :
                new ObjectParameter("Answer2", typeof(string));
    
            var answer3Parameter = answer3 != null ?
                new ObjectParameter("Answer3", answer3) :
                new ObjectParameter("Answer3", typeof(string));
    
            var answer4Parameter = answer4 != null ?
                new ObjectParameter("Answer4", answer4) :
                new ObjectParameter("Answer4", typeof(string));
    
            var answer5Parameter = answer5 != null ?
                new ObjectParameter("Answer5", answer5) :
                new ObjectParameter("Answer5", typeof(string));
    
            var answer6Parameter = answer6 != null ?
                new ObjectParameter("Answer6", answer6) :
                new ObjectParameter("Answer6", typeof(string));
    
            var answer7Parameter = answer7 != null ?
                new ObjectParameter("Answer7", answer7) :
                new ObjectParameter("Answer7", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveSurveyQues", surveyIDParameter, categoryIDParameter, questionIDParameter, questionParameter, answer1Parameter, answer2Parameter, answer3Parameter, answer4Parameter, answer5Parameter, answer6Parameter, answer7Parameter);
        }
    
        public virtual ObjectResult<uspGetSurveyProduct_Result> uspGetSurveyProduct(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSurveyProduct_Result>("uspGetSurveyProduct", clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveApprovedSurveyMst(Nullable<short> surveyID, Nullable<System.DateTime> surveyDt, Nullable<bool> isPublished)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var surveyDtParameter = surveyDt.HasValue ?
                new ObjectParameter("SurveyDt", surveyDt) :
                new ObjectParameter("SurveyDt", typeof(System.DateTime));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveApprovedSurveyMst", surveyIDParameter, surveyDtParameter, isPublishedParameter);
        }
    
        public virtual ObjectResult<uspGetPublishProduct_Result> uspGetPublishProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPublishProduct_Result>("uspGetPublishProduct");
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveActiveProduct(Nullable<short> clientID, Nullable<short> productID, Nullable<bool> isActive, Nullable<short> surveyRewardPoint, Nullable<bool> isPaid)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(short));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var surveyRewardPointParameter = surveyRewardPoint.HasValue ?
                new ObjectParameter("SurveyRewardPoint", surveyRewardPoint) :
                new ObjectParameter("SurveyRewardPoint", typeof(short));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveActiveProduct", clientIDParameter, productIDParameter, isActiveParameter, surveyRewardPointParameter, isPaidParameter);
        }
    
        public virtual ObjectResult<SurveyMst> GetPublishProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetPublishProduct");
        }
    
        public virtual ObjectResult<SurveyMst> GetPublishProduct(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetPublishProduct", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveUpdateImageClient(Nullable<short> clientID, string companyLogo)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveUpdateImageClient", clientIDParameter, companyLogoParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> uspSaveUpdateImageEmployee(Nullable<byte> empID, string empImage)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            var empImageParameter = empImage != null ?
                new ObjectParameter("EmpImage", empImage) :
                new ObjectParameter("EmpImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("uspSaveUpdateImageEmployee", empIDParameter, empImageParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveUpdateImageUser(Nullable<short> userID, string userImage)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveUpdateImageUser", userIDParameter, userImageParameter);
        }
    
        public virtual ObjectResult<uspGetActiveProduct_Result> uspGetActiveProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetActiveProduct_Result>("uspGetActiveProduct");
        }
    
        public virtual ObjectResult<ProductMst> GetActiveProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductMst>("GetActiveProduct");
        }
    
        public virtual ObjectResult<ProductMst> GetActiveProduct(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductMst>("GetActiveProduct", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveUpdateImageProduct(Nullable<short> clientID, Nullable<short> productID, string productImage1, string productImage2, string productImage3, string productImage4, string video)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(short));
    
            var productImage1Parameter = productImage1 != null ?
                new ObjectParameter("ProductImage1", productImage1) :
                new ObjectParameter("ProductImage1", typeof(string));
    
            var productImage2Parameter = productImage2 != null ?
                new ObjectParameter("ProductImage2", productImage2) :
                new ObjectParameter("ProductImage2", typeof(string));
    
            var productImage3Parameter = productImage3 != null ?
                new ObjectParameter("ProductImage3", productImage3) :
                new ObjectParameter("ProductImage3", typeof(string));
    
            var productImage4Parameter = productImage4 != null ?
                new ObjectParameter("ProductImage4", productImage4) :
                new ObjectParameter("ProductImage4", typeof(string));
    
            var videoParameter = video != null ?
                new ObjectParameter("Video", video) :
                new ObjectParameter("Video", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveUpdateImageProduct", clientIDParameter, productIDParameter, productImage1Parameter, productImage2Parameter, productImage3Parameter, productImage4Parameter, videoParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveChangePasswdClient(Nullable<short> clientID, string pass, string passwd)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("Passwd", passwd) :
                new ObjectParameter("Passwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveChangePasswdClient", clientIDParameter, passParameter, passwdParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> uspSaveChangePasswdEmployee(Nullable<byte> empID, string pass, string passwd)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("Passwd", passwd) :
                new ObjectParameter("Passwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("uspSaveChangePasswdEmployee", empIDParameter, passParameter, passwdParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveChangePasswdUser(Nullable<short> userID, string pass, string passwd)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("Passwd", passwd) :
                new ObjectParameter("Passwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveChangePasswdUser", userIDParameter, passParameter, passwdParameter);
        }
    
        public virtual ObjectResult<EmployeeMst> GetEmployee(Nullable<byte> emp)
        {
            var empParameter = emp.HasValue ?
                new ObjectParameter("Emp", emp) :
                new ObjectParameter("Emp", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeMst>("GetEmployee", empParameter);
        }
    
        public virtual ObjectResult<EmployeeMst> GetEmployee(Nullable<byte> emp, MergeOption mergeOption)
        {
            var empParameter = emp.HasValue ?
                new ObjectParameter("Emp", emp) :
                new ObjectParameter("Emp", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeMst>("GetEmployee", mergeOption, empParameter);
        }
    
        public virtual ObjectResult<uspGetReviewQuesForAns_Result> uspGetReviewQuesForAns(Nullable<short> survey)
        {
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReviewQuesForAns_Result>("uspGetReviewQuesForAns", surveyParameter);
        }
    
        public virtual ObjectResult<uspGetSurveyQuesForAns_Result> uspGetSurveyQuesForAns(Nullable<short> survey)
        {
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSurveyQuesForAns_Result>("uspGetSurveyQuesForAns", surveyParameter);
        }
    
        public virtual ObjectResult<SurveyQue> GetSurveyQuesForAns(Nullable<short> survey)
        {
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyQue>("GetSurveyQuesForAns", surveyParameter);
        }
    
        public virtual ObjectResult<SurveyQue> GetSurveyQuesForAns(Nullable<short> survey, MergeOption mergeOption)
        {
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyQue>("GetSurveyQuesForAns", mergeOption, surveyParameter);
        }
    
        public virtual ObjectResult<uspGetReviewQues_Result> uspGetReviewQues(Nullable<short> client, Nullable<short> product)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReviewQues_Result>("uspGetReviewQues", clientParameter, productParameter);
        }
    
        public virtual ObjectResult<uspGetSurveyQues_Result> uspGetSurveyQues(Nullable<short> client, Nullable<short> product)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSurveyQues_Result>("uspGetSurveyQues", clientParameter, productParameter);
        }
    
        public virtual ObjectResult<SurveyQue> GetSurveyQues(Nullable<short> client, Nullable<short> product)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyQue>("GetSurveyQues", clientParameter, productParameter);
        }
    
        public virtual ObjectResult<SurveyQue> GetSurveyQues(Nullable<short> client, Nullable<short> product, MergeOption mergeOption)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyQue>("GetSurveyQues", mergeOption, clientParameter, productParameter);
        }
    
        public virtual ObjectResult<ReviewQue> GetReviewQues(Nullable<short> client, Nullable<short> product)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReviewQue>("GetReviewQues", clientParameter, productParameter);
        }
    
        public virtual ObjectResult<ReviewQue> GetReviewQues(Nullable<short> client, Nullable<short> product, MergeOption mergeOption)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(short));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReviewQue>("GetReviewQues", mergeOption, clientParameter, productParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveReviewAns(Nullable<short> surveyID, Nullable<byte> categoryID, Nullable<short> questionID, Nullable<short> userID, string answer)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(byte));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveReviewAns", surveyIDParameter, categoryIDParameter, questionIDParameter, userIDParameter, answerParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveSurveyAns(Nullable<short> surveyID, Nullable<byte> categoryID, Nullable<short> questionID, Nullable<short> userID, Nullable<byte> answer)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(byte));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var answerParameter = answer.HasValue ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveSurveyAns", surveyIDParameter, categoryIDParameter, questionIDParameter, userIDParameter, answerParameter);
        }
    
        public virtual ObjectResult<uspGetReviewAnsForUser_Result> uspGetReviewAnsForUser(Nullable<short> user, Nullable<short> survey)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetReviewAnsForUser_Result>("uspGetReviewAnsForUser", userParameter, surveyParameter);
        }
    
        public virtual ObjectResult<uspGetSurveyAnsForUser_Result> uspGetSurveyAnsForUser(Nullable<short> user, Nullable<short> survey)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSurveyAnsForUser_Result>("uspGetSurveyAnsForUser", userParameter, surveyParameter);
        }
    
        public virtual ObjectResult<ReviewAn> GetReviewAnsForUser(Nullable<short> user, Nullable<short> survey)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReviewAn>("GetReviewAnsForUser", userParameter, surveyParameter);
        }
    
        public virtual ObjectResult<ReviewAn> GetReviewAnsForUser(Nullable<short> user, Nullable<short> survey, MergeOption mergeOption)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReviewAn>("GetReviewAnsForUser", mergeOption, userParameter, surveyParameter);
        }
    
        public virtual ObjectResult<SurveyAn> GetSurveyAnsForUser(Nullable<short> user, Nullable<short> survey)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyAn>("GetSurveyAnsForUser", userParameter, surveyParameter);
        }
    
        public virtual ObjectResult<SurveyAn> GetSurveyAnsForUser(Nullable<short> user, Nullable<short> survey, MergeOption mergeOption)
        {
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(short));
    
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyAn>("GetSurveyAnsForUser", mergeOption, userParameter, surveyParameter);
        }
    
        public virtual ObjectResult<ProductMst> GetProduct(Nullable<short> product)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductMst>("GetProduct", productParameter);
        }
    
        public virtual ObjectResult<ProductMst> GetProduct(Nullable<short> product, MergeOption mergeOption)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductMst>("GetProduct", mergeOption, productParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSaveSurveyPayment(Nullable<int> sPID, Nullable<System.DateTime> sPDate, Nullable<short> surveyID, Nullable<short> totalAmt, string refNo)
        {
            var sPIDParameter = sPID.HasValue ?
                new ObjectParameter("SPID", sPID) :
                new ObjectParameter("SPID", typeof(int));
    
            var sPDateParameter = sPDate.HasValue ?
                new ObjectParameter("SPDate", sPDate) :
                new ObjectParameter("SPDate", typeof(System.DateTime));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var totalAmtParameter = totalAmt.HasValue ?
                new ObjectParameter("TotalAmt", totalAmt) :
                new ObjectParameter("TotalAmt", typeof(short));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSaveSurveyPayment", sPIDParameter, sPDateParameter, surveyIDParameter, totalAmtParameter, refNoParameter);
        }
    
        public virtual ObjectResult<SurveyMst> GetSurveyProduct(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetSurveyProduct", clientIDParameter);
        }
    
        public virtual ObjectResult<SurveyMst> GetSurveyProduct(Nullable<short> clientID, MergeOption mergeOption)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetSurveyProduct", mergeOption, clientIDParameter);
        }
    
        public virtual int uspSaveSurveyCntIncrement(Nullable<short> userID, Nullable<short> surveyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveSurveyCntIncrement", userIDParameter, surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetProductResponse_Result> uspGetProductResponse(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProductResponse_Result>("uspGetProductResponse", clientIDParameter);
        }
    
        public virtual ObjectResult<SurveyMst> GetProductResponse(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetProductResponse", clientIDParameter);
        }
    
        public virtual ObjectResult<SurveyMst> GetProductResponse(Nullable<short> clientID, MergeOption mergeOption)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetProductResponse", mergeOption, clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveEwalletMst(Nullable<short> surveyID, Nullable<short> userID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveEwalletMst", surveyIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveApprovedEwallet(Nullable<short> surveyID, Nullable<short> userID, Nullable<bool> isApproved)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveApprovedEwallet", surveyIDParameter, userIDParameter, isApprovedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSaveQueryMst(Nullable<int> queryID, string queryDisc, string emailID)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var queryDiscParameter = queryDisc != null ?
                new ObjectParameter("QueryDisc", queryDisc) :
                new ObjectParameter("QueryDisc", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSaveQueryMst", queryIDParameter, queryDiscParameter, emailIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSaveFeedbackMst(Nullable<int> feedbackID, Nullable<short> clientID, Nullable<short> productID, string feedbackDisc, Nullable<byte> ratings, string userEmail, string userContactNo)
        {
            var feedbackIDParameter = feedbackID.HasValue ?
                new ObjectParameter("FeedbackID", feedbackID) :
                new ObjectParameter("FeedbackID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(short));
    
            var feedbackDiscParameter = feedbackDisc != null ?
                new ObjectParameter("FeedbackDisc", feedbackDisc) :
                new ObjectParameter("FeedbackDisc", typeof(string));
    
            var ratingsParameter = ratings.HasValue ?
                new ObjectParameter("Ratings", ratings) :
                new ObjectParameter("Ratings", typeof(byte));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userContactNoParameter = userContactNo != null ?
                new ObjectParameter("UserContactNo", userContactNo) :
                new ObjectParameter("UserContactNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSaveFeedbackMst", feedbackIDParameter, clientIDParameter, productIDParameter, feedbackDiscParameter, ratingsParameter, userEmailParameter, userContactNoParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveApprovedQuery(Nullable<int> queryID, string replyDisc, Nullable<bool> replyStatus)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var replyDiscParameter = replyDisc != null ?
                new ObjectParameter("ReplyDisc", replyDisc) :
                new ObjectParameter("ReplyDisc", typeof(string));
    
            var replyStatusParameter = replyStatus.HasValue ?
                new ObjectParameter("ReplyStatus", replyStatus) :
                new ObjectParameter("ReplyStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveApprovedQuery", queryIDParameter, replyDiscParameter, replyStatusParameter);
        }
    
        public virtual ObjectResult<uspGetUserEwalletList_Result> uspGetUserEwalletList(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserEwalletList_Result>("uspGetUserEwalletList", userIDParameter);
        }
    
        public virtual ObjectResult<ProductMst> GetUserEwalletList(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductMst>("GetUserEwalletList", userIDParameter);
        }
    
        public virtual ObjectResult<ProductMst> GetUserEwalletList(Nullable<short> userID, MergeOption mergeOption)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductMst>("GetUserEwalletList", mergeOption, userIDParameter);
        }
    
        public virtual ObjectResult<uspGetInActiveEmployee_Result> uspGetInActiveEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetInActiveEmployee_Result>("uspGetInActiveEmployee");
        }
    
        public virtual ObjectResult<EmployeeMst> GetInActiveEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeMst>("GetInActiveEmployee");
        }
    
        public virtual ObjectResult<EmployeeMst> GetInActiveEmployee(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeMst>("GetInActiveEmployee", mergeOption);
        }
    
        public virtual ObjectResult<uspGetEmployeePackage_Result> uspGetEmployeePackage(Nullable<byte> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEmployeePackage_Result>("uspGetEmployeePackage", empIDParameter);
        }
    
        public virtual ObjectResult<PackageMst> GetEmployeePackage(Nullable<byte> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PackageMst>("GetEmployeePackage", empIDParameter);
        }
    
        public virtual ObjectResult<PackageMst> GetEmployeePackage(Nullable<byte> empID, MergeOption mergeOption)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PackageMst>("GetEmployeePackage", mergeOption, empIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSaveTransferAmount(Nullable<short> userID, Nullable<int> tAID, Nullable<System.DateTime> tADate, Nullable<short> totalTransferRewardPoint, Nullable<short> totalTransferAmount, string transferTo, string transferToUserName, string refNo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var tAIDParameter = tAID.HasValue ?
                new ObjectParameter("TAID", tAID) :
                new ObjectParameter("TAID", typeof(int));
    
            var tADateParameter = tADate.HasValue ?
                new ObjectParameter("TADate", tADate) :
                new ObjectParameter("TADate", typeof(System.DateTime));
    
            var totalTransferRewardPointParameter = totalTransferRewardPoint.HasValue ?
                new ObjectParameter("TotalTransferRewardPoint", totalTransferRewardPoint) :
                new ObjectParameter("TotalTransferRewardPoint", typeof(short));
    
            var totalTransferAmountParameter = totalTransferAmount.HasValue ?
                new ObjectParameter("TotalTransferAmount", totalTransferAmount) :
                new ObjectParameter("TotalTransferAmount", typeof(short));
    
            var transferToParameter = transferTo != null ?
                new ObjectParameter("TransferTo", transferTo) :
                new ObjectParameter("TransferTo", typeof(string));
    
            var transferToUserNameParameter = transferToUserName != null ?
                new ObjectParameter("TransferToUserName", transferToUserName) :
                new ObjectParameter("TransferToUserName", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSaveTransferAmount", userIDParameter, tAIDParameter, tADateParameter, totalTransferRewardPointParameter, totalTransferAmountParameter, transferToParameter, transferToUserNameParameter, refNoParameter);
        }
    
        public virtual ObjectResult<uspGetEIDAndPWD_Result> uspGetEIDAndPWD(Nullable<byte> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEIDAndPWD_Result>("uspGetEIDAndPWD", empIDParameter);
        }
    
        public virtual ObjectResult<uspGetEIDAndPWD_Result> GetEmpEIDAndPWD(Nullable<byte> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEIDAndPWD_Result>("GetEmpEIDAndPWD", empIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientEIDAndPWD_Result> uspGetClientEIDAndPWD(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientEIDAndPWD_Result>("uspGetClientEIDAndPWD", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserEIDAndPWD_Result> uspGetUserEIDAndPWD(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserEIDAndPWD_Result>("uspGetUserEIDAndPWD", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserEIDAndPWD_Result> GetUserEIDAndPWD(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserEIDAndPWD_Result>("GetUserEIDAndPWD", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientEIDAndPWD_Result> GetClientEIDAndPWD(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientEIDAndPWD_Result>("GetClientEIDAndPWD", clientIDParameter);
        }
    
        public virtual ObjectResult<string> uspGetRecoverPasswd(string emailID)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetRecoverPasswd", emailIDParameter);
        }
    
        public virtual ObjectResult<PurchasePackage> GetPurchasePackage(Nullable<short> purchasePackage)
        {
            var purchasePackageParameter = purchasePackage.HasValue ?
                new ObjectParameter("PurchasePackage", purchasePackage) :
                new ObjectParameter("PurchasePackage", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchasePackage>("GetPurchasePackage", purchasePackageParameter);
        }
    
        public virtual ObjectResult<PurchasePackage> GetPurchasePackage(Nullable<short> purchasePackage, MergeOption mergeOption)
        {
            var purchasePackageParameter = purchasePackage.HasValue ?
                new ObjectParameter("PurchasePackage", purchasePackage) :
                new ObjectParameter("PurchasePackage", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchasePackage>("GetPurchasePackage", mergeOption, purchasePackageParameter);
        }
    
        public virtual ObjectResult<uspSaveSurveyCntIncrement_Result> SurveyCntIncrement(Nullable<short> userID, Nullable<short> surveyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSaveSurveyCntIncrement_Result>("SurveyCntIncrement", userIDParameter, surveyIDParameter);
        }
    
        public virtual ObjectResult<ReviewQue> GetReviewQuesForAns(Nullable<short> survey)
        {
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReviewQue>("GetReviewQuesForAns", surveyParameter);
        }
    
        public virtual ObjectResult<ReviewQue> GetReviewQuesForAns(Nullable<short> survey, MergeOption mergeOption)
        {
            var surveyParameter = survey.HasValue ?
                new ObjectParameter("Survey", survey) :
                new ObjectParameter("Survey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReviewQue>("GetReviewQuesForAns", mergeOption, surveyParameter);
        }
    
        public virtual ObjectResult<uspGetProductResponseForEmployee_Result> uspGetProductResponseForEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetProductResponseForEmployee_Result>("uspGetProductResponseForEmployee");
        }
    
        public virtual ObjectResult<SurveyMst> GetProductResponseForEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetProductResponseForEmployee");
        }
    
        public virtual ObjectResult<SurveyMst> GetProductResponseForEmployee(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SurveyMst>("GetProductResponseForEmployee", mergeOption);
        }
    
        public virtual ObjectResult<uspCheckLogin_Result> uspCheckLogin(string emailID, string passwd)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("Passwd", passwd) :
                new ObjectParameter("Passwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckLogin_Result>("uspCheckLogin", emailIDParameter, passwdParameter);
        }
    
        public virtual ObjectResult<uspCheckLogin_Result> CheckLogin(string emailID, string passwd)
        {
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("Passwd", passwd) :
                new ObjectParameter("Passwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckLogin_Result>("CheckLogin", emailIDParameter, passwdParameter);
        }
    
        public virtual ObjectResult<uspGetEmployeeReport_Result> uspGetEmployeeReport(Nullable<byte> empiD)
        {
            var empiDParameter = empiD.HasValue ?
                new ObjectParameter("EmpiD", empiD) :
                new ObjectParameter("EmpiD", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEmployeeReport_Result>("uspGetEmployeeReport", empiDParameter);
        }
    
        public virtual int uspUpdateLastLoginDate(Nullable<short> iD, string designation)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateLastLoginDate", iDParameter, designationParameter);
        }
    
        public virtual ObjectResult<uspGetClientReport_Result> uspGetClientReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientReport_Result>("uspGetClientReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientReport_Result> GetClientReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientReport_Result>("GetClientReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetEmployeeReport_Result> GetEmployeeReport(Nullable<byte> empiD)
        {
            var empiDParameter = empiD.HasValue ?
                new ObjectParameter("EmpiD", empiD) :
                new ObjectParameter("EmpiD", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEmployeeReport_Result>("GetEmployeeReport", empiDParameter);
        }
    
        public virtual int UpdateLastLoginDate(Nullable<short> iD, string designation)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLastLoginDate", iDParameter, designationParameter);
        }
    
        public virtual ObjectResult<uspGetUserReport_Result> uspGetUserReport(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserReport_Result>("uspGetUserReport", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserReport_Result> GetUserReport(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserReport_Result>("GetUserReport", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetResponse_Result> uspGetResponse(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetResponse_Result>("uspGetResponse", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetResponse_Result> GetResponse(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetResponse_Result>("GetResponse", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetAdminReport_Result> uspGetAdminReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAdminReport_Result>("uspGetAdminReport");
        }
    
        public virtual ObjectResult<uspGetAdminReport_Result> GetAdminReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAdminReport_Result>("GetAdminReport");
        }
    
        public virtual ObjectResult<uspGetClientFeedBackReport_Result> uspGetClientFeedBackReport(Nullable<short> clientID, Nullable<byte> ratings)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var ratingsParameter = ratings.HasValue ?
                new ObjectParameter("Ratings", ratings) :
                new ObjectParameter("Ratings", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientFeedBackReport_Result>("uspGetClientFeedBackReport", clientIDParameter, ratingsParameter);
        }
    
        public virtual ObjectResult<uspGetClientFeedBackReport_Result> GetFeedbackReport(Nullable<short> clientID, Nullable<byte> ratings)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var ratingsParameter = ratings.HasValue ?
                new ObjectParameter("Ratings", ratings) :
                new ObjectParameter("Ratings", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientFeedBackReport_Result>("GetFeedbackReport", clientIDParameter, ratingsParameter);
        }
    
        public virtual ObjectResult<uspGetClientSurveyReport_Result> uspGetClientSurveyReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientSurveyReport_Result>("uspGetClientSurveyReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientSurveyReport_Result> GetSurveyReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientSurveyReport_Result>("GetSurveyReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientReviewQuestionReport_Result> uspGetClientReviewQuestionReport(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientReviewQuestionReport_Result>("uspGetClientReviewQuestionReport", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientReviewQuestionReport_Result> GetReviewQuesReport(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientReviewQuestionReport_Result>("GetReviewQuesReport", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetSurveyPieChartReport_Result> uspGetSurveyPieChartReport(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSurveyPieChartReport_Result>("uspGetSurveyPieChartReport", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetSurveyPieChartReport_Result> SurveyPieChartReport(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSurveyPieChartReport_Result>("SurveyPieChartReport", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetSystemReport_Result> uspGetSystemReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSystemReport_Result>("uspGetSystemReport");
        }
    
        public virtual ObjectResult<uspGetSystemReport_Result> SystemReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSystemReport_Result>("SystemReport");
        }
    
        public virtual ObjectResult<string> uspGetClientReviewAnswerReport(Nullable<short> surveyID, Nullable<short> questionID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetClientReviewAnswerReport", surveyIDParameter, questionIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientReviewAnswerReport_Result> GetReviewAnsReport(Nullable<short> surveyID, Nullable<short> questionID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientReviewAnswerReport_Result>("GetReviewAnsReport", surveyIDParameter, questionIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientSurveyQuestionReport_Result> uspGetClientSurveyQuestionReport(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientSurveyQuestionReport_Result>("uspGetClientSurveyQuestionReport", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientSurveyQuestionReport_Result> GetSurveyQuesReport(Nullable<short> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientSurveyQuestionReport_Result>("GetSurveyQuesReport", surveyIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserTrasferAmountReport_Result> uspGetUserTrasferAmountReport(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserTrasferAmountReport_Result>("uspGetUserTrasferAmountReport", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserViseEwalletReport_Result> uspGetUserViseEwalletReport(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserViseEwalletReport_Result>("uspGetUserViseEwalletReport", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserViseEwalletReport_Result> UserWiseEwalletReport(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserViseEwalletReport_Result>("UserWiseEwalletReport", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserTrasferAmountReport_Result> UserTransferAmountReport(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserTrasferAmountReport_Result>("UserTransferAmountReport", userIDParameter);
        }
    
        public virtual ObjectResult<uspSaveProductMst_Result> uspSaveProductMst(Nullable<short> clientID, Nullable<short> productID, string productName, string productCompany, string modelName, string shortDiscription, string briefDiscription, string facility, Nullable<decimal> price, string productImage1, string productImage2, string productImage3, string productImage4, string video, Nullable<decimal> totalSurveyAmt, Nullable<decimal> surveyPerAmount, Nullable<short> noOfSurvey)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(short));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productCompanyParameter = productCompany != null ?
                new ObjectParameter("ProductCompany", productCompany) :
                new ObjectParameter("ProductCompany", typeof(string));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var shortDiscriptionParameter = shortDiscription != null ?
                new ObjectParameter("ShortDiscription", shortDiscription) :
                new ObjectParameter("ShortDiscription", typeof(string));
    
            var briefDiscriptionParameter = briefDiscription != null ?
                new ObjectParameter("BriefDiscription", briefDiscription) :
                new ObjectParameter("BriefDiscription", typeof(string));
    
            var facilityParameter = facility != null ?
                new ObjectParameter("Facility", facility) :
                new ObjectParameter("Facility", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var productImage1Parameter = productImage1 != null ?
                new ObjectParameter("ProductImage1", productImage1) :
                new ObjectParameter("ProductImage1", typeof(string));
    
            var productImage2Parameter = productImage2 != null ?
                new ObjectParameter("ProductImage2", productImage2) :
                new ObjectParameter("ProductImage2", typeof(string));
    
            var productImage3Parameter = productImage3 != null ?
                new ObjectParameter("ProductImage3", productImage3) :
                new ObjectParameter("ProductImage3", typeof(string));
    
            var productImage4Parameter = productImage4 != null ?
                new ObjectParameter("ProductImage4", productImage4) :
                new ObjectParameter("ProductImage4", typeof(string));
    
            var videoParameter = video != null ?
                new ObjectParameter("Video", video) :
                new ObjectParameter("Video", typeof(string));
    
            var totalSurveyAmtParameter = totalSurveyAmt.HasValue ?
                new ObjectParameter("TotalSurveyAmt", totalSurveyAmt) :
                new ObjectParameter("TotalSurveyAmt", typeof(decimal));
    
            var surveyPerAmountParameter = surveyPerAmount.HasValue ?
                new ObjectParameter("SurveyPerAmount", surveyPerAmount) :
                new ObjectParameter("SurveyPerAmount", typeof(decimal));
    
            var noOfSurveyParameter = noOfSurvey.HasValue ?
                new ObjectParameter("NoOfSurvey", noOfSurvey) :
                new ObjectParameter("NoOfSurvey", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSaveProductMst_Result>("uspSaveProductMst", clientIDParameter, productIDParameter, productNameParameter, productCompanyParameter, modelNameParameter, shortDiscriptionParameter, briefDiscriptionParameter, facilityParameter, priceParameter, productImage1Parameter, productImage2Parameter, productImage3Parameter, productImage4Parameter, videoParameter, totalSurveyAmtParameter, surveyPerAmountParameter, noOfSurveyParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveSurveyMst(Nullable<short> clientID, Nullable<short> productID, Nullable<short> surveyID, Nullable<short> surveyCnt)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(short));
    
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var surveyCntParameter = surveyCnt.HasValue ?
                new ObjectParameter("SurveyCnt", surveyCnt) :
                new ObjectParameter("SurveyCnt", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveSurveyMst", clientIDParameter, productIDParameter, surveyIDParameter, surveyCntParameter);
        }
    
        public virtual ObjectResult<uspGetDateWiseUserTransferAmountReport_Result> uspGetDateWiseUserTransferAmountReport(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDateWiseUserTransferAmountReport_Result>("uspGetDateWiseUserTransferAmountReport", dateParameter);
        }
    
        public virtual ObjectResult<uspGetDateWiseUserTransferAmountReport_Result> DateWiseTransferAmountReport(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDateWiseUserTransferAmountReport_Result>("DateWiseTransferAmountReport", dateParameter);
        }
    
        public virtual ObjectResult<uspGetDateWiseSurveyPaymentReport_Result> uspGetDateWiseSurveyPaymentReport(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDateWiseSurveyPaymentReport_Result>("uspGetDateWiseSurveyPaymentReport", dateParameter);
        }
    
        public virtual ObjectResult<uspGetDateWiseSurveyPaymentReport_Result> DateWiseSurveyPaymentReport(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDateWiseSurveyPaymentReport_Result>("DateWiseSurveyPaymentReport", dateParameter);
        }
    
        public virtual ObjectResult<uspGetClientWisePurchasePackageReport_Result> uspGetClientWisePurchasePackageReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientWisePurchasePackageReport_Result>("uspGetClientWisePurchasePackageReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientWisePurchasePackageReport_Result> ClientPackageReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientWisePurchasePackageReport_Result>("ClientPackageReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientWiseSurveyPaymentReport_Result> uspGetClientWiseSurveyPaymentReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientWiseSurveyPaymentReport_Result>("uspGetClientWiseSurveyPaymentReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientWiseSurveyPaymentReport_Result> ClientSurveyReport(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientWiseSurveyPaymentReport_Result>("ClientSurveyReport", clientIDParameter);
        }
    
        public virtual ObjectResult<uspGetStateWiseUserReport_Result> uspGetStateWiseUserReport(Nullable<short> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetStateWiseUserReport_Result>("uspGetStateWiseUserReport", stateIDParameter);
        }
    
        public virtual ObjectResult<uspGetStateWiseUserReport_Result> StateWiseUserReport(Nullable<short> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetStateWiseUserReport_Result>("StateWiseUserReport", stateIDParameter);
        }
    
        public virtual ObjectResult<uspGetCityWiseUserReport_Result> uspGetCityWiseUserReport(Nullable<short> stateID, Nullable<short> cityID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(short));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCityWiseUserReport_Result>("uspGetCityWiseUserReport", stateIDParameter, cityIDParameter);
        }
    
        public virtual ObjectResult<uspGetCityWiseUserReport_Result> CityWiseUserReport(Nullable<short> stateID, Nullable<short> cityID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(short));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCityWiseUserReport_Result>("CityWiseUserReport", stateIDParameter, cityIDParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspCheckPackage(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspCheckPackage", clientIDParameter);
        }
    
        public virtual ObjectResult<uspCheckPackage_Result> CheckPackage(Nullable<short> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckPackage_Result>("CheckPackage", clientIDParameter);
        }
    
        public virtual int uspSavePackageProductCnt(Nullable<short> clientID, Nullable<bool> status)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSavePackageProductCnt", clientIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspSavePackageProductCnt_Result> SavePackageProductCnt(Nullable<short> clientID, Nullable<bool> status)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSavePackageProductCnt_Result>("SavePackageProductCnt", clientIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<SaveApprovedSurveyMst_Result> SaveApprovedSurveyMst(Nullable<short> surveyID, Nullable<System.DateTime> surveyDt, Nullable<bool> isPublished)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var surveyDtParameter = surveyDt.HasValue ?
                new ObjectParameter("SurveyDt", surveyDt) :
                new ObjectParameter("SurveyDt", typeof(System.DateTime));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("IsPublished", isPublished) :
                new ObjectParameter("IsPublished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveApprovedSurveyMst_Result>("SaveApprovedSurveyMst", surveyIDParameter, surveyDtParameter, isPublishedParameter);
        }
    
        public virtual ObjectResult<uspGetQuery_Result> uspGetQuery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetQuery_Result>("uspGetQuery");
        }
    
        public virtual ObjectResult<QueryMst> GetQuery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QueryMst>("GetQuery");
        }
    
        public virtual ObjectResult<QueryMst> GetQuery(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QueryMst>("GetQuery", mergeOption);
        }
    
        public virtual ObjectResult<uspGetDateWiseAddProductReport_Result> uspGetDateWiseAddProductReport(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetDateWiseAddProductReport_Result>("uspGetDateWiseAddProductReport", dateParameter);
        }
    
        public virtual ObjectResult<DateWiseProductReport_Result> DateWiseProductReport(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DateWiseProductReport_Result>("DateWiseProductReport", dateParameter);
        }
    
        public virtual ObjectResult<uspSavePurchasePackage_Result> uspSavePurchasePackage(Nullable<byte> packageID, Nullable<short> clientID, Nullable<short> purchaseID, Nullable<decimal> price, string refNo, Nullable<System.DateTime> paidDate)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(byte));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var paidDateParameter = paidDate.HasValue ?
                new ObjectParameter("PaidDate", paidDate) :
                new ObjectParameter("PaidDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSavePurchasePackage_Result>("uspSavePurchasePackage", packageIDParameter, clientIDParameter, purchaseIDParameter, priceParameter, refNoParameter, paidDateParameter);
        }
    
        public virtual ObjectResult<uspSavePurchasePackage_Result> SavePurchasePackage(Nullable<byte> packageID, Nullable<short> clientID, Nullable<short> purchaseID, Nullable<decimal> price, string refNo, Nullable<System.DateTime> paidDate)
        {
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(byte));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(short));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(short));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var paidDateParameter = paidDate.HasValue ?
                new ObjectParameter("PaidDate", paidDate) :
                new ObjectParameter("PaidDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSavePurchasePackage_Result>("SavePurchasePackage", packageIDParameter, clientIDParameter, purchaseIDParameter, priceParameter, refNoParameter, paidDateParameter);
        }
    
        public virtual ObjectResult<uspGetUserEwallet_Result> uspGetUserEwallet(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserEwallet_Result>("uspGetUserEwallet", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserEwallet_Result> GetUserEwallet(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserEwallet_Result>("GetUserEwallet", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<short>> uspSaveRedeemReward(Nullable<short> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("uspSaveRedeemReward", userIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientSurveyAnswerReport_Result> uspGetClientSurveyAnswerReport(Nullable<short> surveyID, Nullable<short> questionID, Nullable<short> categoryID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientSurveyAnswerReport_Result>("uspGetClientSurveyAnswerReport", surveyIDParameter, questionIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<uspGetClientSurveyAnswerReport_Result> GetSurveyAnsReport(Nullable<short> surveyID, Nullable<short> questionID, Nullable<short> categoryID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("SurveyID", surveyID) :
                new ObjectParameter("SurveyID", typeof(short));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(short));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetClientSurveyAnswerReport_Result>("GetSurveyAnsReport", surveyIDParameter, questionIDParameter, categoryIDParameter);
        }
    }
}
